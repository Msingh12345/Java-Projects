package com.jsp.springboot.actordb.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.jsp.springboot.actordb.entity.Actor;
import com.jsp.springboot.actordb.exception.UserNotFoundByIdException;
import com.jsp.springboot.actordb.service.ActorService;
import com.jsp.springboot.actordb.utility.ResponseStructure;

//@Controller
//@ResponseBody
@RestController
public class ActorController {

	@Autowired
	private ActorService actorService;
	// ActorService ac = new ActorServiceImpl();

	//	private Map<String,Object>sendResponse(int status, String message, Actor data){
	//		return Map.of(
	//				"status",status,
	//				"message",message,
	//				"data",data
	//				);		
	//	}

	@PostMapping("/actors")
	private ResponseStructure<Actor>addActor(@RequestBody Actor actor){
		actor=actorService.addActor(actor);
		return ResponseStructure.create(201,"User Crreated",actor);
	}



	//	@RequestMapping(value = "/actors" , method = RequestMethod.POST)
	//	//@PostMapping("/actors")
	//	public Map<String, Object> addActor(@RequestBody Actor actor) {
	////		return actorService.addActor(actor);
	//	  actor=actorService.addActor(actor);
	//      return this.sendResponse(201, "user created", actor);
	//	}












	//	//@RequestMapping(value = "/actors" , method = RequestMethod.GET)
	//	@GetMapping("/find-all")
	//	public List<Actor> findAllActors() {
	//		return actorService.findAllActors();
	//
	//	}

	@GetMapping("/find-all")
	public ResponseStructure<List<Actor>> findAllActors() {
		List<Actor> actor= actorService.findAllActors();
		return ResponseStructure.create(HttpStatus.FOUND.value(), "Users Found", actor);
	}









	////	@RequestMapping(value = "/find-actors" , method = RequestMethod.GET)
	//	@GetMapping("/find-actor")
	//	public Actor findActorById(@RequestParam int actorId) {
	//		return actorService.findActorById(actorId);
	//	}

	//	@ExceptionHandler
	//	public Map<String, Object> handleUserNotFoundById(UserNotFoundByIdException ex) {
	//		//return ex.getMessage();
	//		
	////		Map<String, Object>m=new HashMap<String, Object>();
	////		m.put("status", 404);
	////		m.put("message", ex.getMessage());
	////		m.put("rooCause", "user not found by given id");
	////		return m;
	//		
	//		return Map.of(
	//				"status",404,
	//				"message",ex.getMessage(),
	//				"rootcause","user not found by given id"
	//				);
	//				
	//	}
	
	@GetMapping("/find-actor")
	public ResponseStructure<Actor> findActorById(@RequestParam int actorId) {
		 Actor actor=actorService.findActorById(actorId);
		 return ResponseStructure.create(HttpStatus.FOUND.value(), "User found", actor);
	}
	
	
	
	
	
	

//	//	@RequestMapping(value = "/actors" , method = RequestMethod.PUT)
//	@PutMapping("/update")
//	public Actor updateActorById(@RequestBody Actor actor) {
//		return actorService.updateActorById(actor);
//
//	}
	
	@PutMapping("/update")
	public ResponseStructure<Actor> updateActorById(@RequestBody Actor actor) {
		actor= actorService.updateActorById(actor);
		return ResponseStructure.create(HttpStatus.FOUND.value(), "User data Updated", actor);

	}

	
	
	
	
	
	
	
	
	
	
	//	@RequestMapping(value = "/actors" , method = RequestMethod.DELETE)
	@DeleteMapping("/actors")
	public Actor deleteActorById(@RequestParam int actorId) {
		return actorService.deleteActorById(actorId);

	}


}
