package com.jsp.springboot.actordb.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.jsp.springboot.actordb.entity.Actor;
import com.jsp.springboot.actordb.exception.UserNotFoundByIdException;
import com.jsp.springboot.actordb.service.ActorService;

//@Controller
//@ResponseBody
@RestController
public class ActorController {

	@Autowired
	private ActorService actorService;
	// ActorService ac = new ActorServiceImpl();

	@RequestMapping(value = "/actors" , method = RequestMethod.POST)
	//@PostMapping("/actors")
	public Actor addActor(@RequestBody Actor actor) {
		return actorService.addActor(actor);

	}

//	@RequestMapping(value = "/actors" , method = RequestMethod.GET)
	@GetMapping("/actors")
	public List<Actor> findAllActors() {
		return actorService.findAllActors();

	}
	
//	@RequestMapping(value = "/find-actors" , method = RequestMethod.GET)
	@GetMapping("/find-actor")
	public Actor findActorById(@RequestParam int actorId) {
		return actorService.findActorById(actorId);
	}
	
	
	
//	@RequestMapping(value = "/actors" , method = RequestMethod.PUT)
	@PutMapping("/update")
	public Actor updateActorById(@RequestBody Actor actor) {
		return actorService.updateActorById(actor);
		
	}

//	@RequestMapping(value = "/actors" , method = RequestMethod.DELETE)
	@DeleteMapping("/actors")
	public Actor deleteActorById(@RequestParam int actorId) {
		return actorService.deleteActorById(actorId);

	}
	

}
